
BkupSRAM_Standby.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d48  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002f18  08002f18  00003f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800300c  0800300c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  0800300c  0800300c  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003014  08003014  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003014  08003014  00004014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003018  08003018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800301c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000005c  08003078  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003078  0000520c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000927f  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001927  00000000  00000000  0000e30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000598  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021426  00000000  00000000  00010930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a736  00000000  00000000  00031d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8323  00000000  00000000  0003c48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001047af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002194  00000000  00000000  001047f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00106988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002f00 	.word	0x08002f00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002f00 	.word	0x08002f00

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 faf6 	bl	8000ba4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b8:	f000 fc42 	bl	8000e40 <HAL_SYSTICK_IRQHandler>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <printmsg>:
  * @param  format: Format string as in printf.
  * @param  ...: Additional arguments providing the data to print.
  * @retval None
  */
void printmsg(char *format,...)
{
 80005c0:	b40f      	push	{r0, r1, r2, r3}
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b096      	sub	sp, #88	@ 0x58
 80005c6:	af00      	add	r7, sp, #0
  char str[80];

  /*Extract the the argument list using VA apis */
  va_list args;
  va_start(args, format);
 80005c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005cc:	607b      	str	r3, [r7, #4]
  vsprintf(str, format,args);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f810 	bl	80025fc <vsiprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fe15 	bl	8000210 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f107 0108 	add.w	r1, r7, #8
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <printmsg+0x48>)
 80005f4:	f001 fc77 	bl	8001ee6 <HAL_UART_Transmit>
  va_end(args);
}
 80005f8:	bf00      	nop
 80005fa:	3758      	adds	r7, #88	@ 0x58
 80005fc:	46bd      	mov	sp, r7
 80005fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000602:	b004      	add	sp, #16
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000078 	.word	0x20000078

0800060c <main>:

int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  uint32_t * pBackupSRAMbase=0;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  char write_buf[] = "Hello";
 8000616:	4a4b      	ldr	r2, [pc, #300]	@ (8000744 <main+0x138>)
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000620:	6018      	str	r0, [r3, #0]
 8000622:	3304      	adds	r3, #4
 8000624:	8019      	strh	r1, [r3, #0]
  HAL_Init();
 8000626:	f000 fa6b 	bl	8000b00 <HAL_Init>
  GPIO_Init();
 800062a:	f000 f93d 	bl	80008a8 <GPIO_Init>
  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 800062e:	2032      	movs	r0, #50	@ 0x32
 8000630:	f000 f89c 	bl	800076c <SystemClock_Config_HSE>
  UART2_Init();
 8000634:	f000 f95e 	bl	80008f4 <UART2_Init>

  //1. Turn on the clock in RCC register for backup sram
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <main+0x13c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000640:	4a41      	ldr	r2, [pc, #260]	@ (8000748 <main+0x13c>)
 8000642:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000646:	6313      	str	r3, [r2, #48]	@ 0x30
 8000648:	4b3f      	ldr	r3, [pc, #252]	@ (8000748 <main+0x13c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

  //2. Enable Write access to the backup domain
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b3b      	ldr	r3, [pc, #236]	@ (8000748 <main+0x13c>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a3a      	ldr	r2, [pc, #232]	@ (8000748 <main+0x13c>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b38      	ldr	r3, [pc, #224]	@ (8000748 <main+0x13c>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess();
 8000670:	f000 fda0 	bl	80011b4 <HAL_PWR_EnableBkUpAccess>

  pBackupSRAMbase = (uint32_t*)BKPSRAM_BASE;
 8000674:	4b35      	ldr	r3, [pc, #212]	@ (800074c <main+0x140>)
 8000676:	61bb      	str	r3, [r7, #24]

  //Enable clock for PWR Controller block
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <main+0x13c>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a31      	ldr	r2, [pc, #196]	@ (8000748 <main+0x13c>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <main+0x13c>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000694:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <main+0x144>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b02      	cmp	r3, #2
 800069e:	d11c      	bne.n	80006da <main+0xce>
  {
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80006a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <main+0x144>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <main+0x144>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6013      	str	r3, [r2, #0]
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <main+0x144>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a27      	ldr	r2, [pc, #156]	@ (8000750 <main+0x144>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6013      	str	r3, [r2, #0]

    printmsg("woke up from the standby mode\r\n");
 80006b8:	4826      	ldr	r0, [pc, #152]	@ (8000754 <main+0x148>)
 80006ba:	f7ff ff81 	bl	80005c0 <printmsg>
    uint8_t data = (uint8_t)*pBackupSRAMbase;
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	75fb      	strb	r3, [r7, #23]
    if(data != 'H')
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	2b48      	cmp	r3, #72	@ 0x48
 80006c8:	d003      	beq.n	80006d2 <main+0xc6>
    {
      printmsg("Backup SRAM data is lost\r\n");
 80006ca:	4823      	ldr	r0, [pc, #140]	@ (8000758 <main+0x14c>)
 80006cc:	f7ff ff78 	bl	80005c0 <printmsg>
 80006d0:	e01e      	b.n	8000710 <main+0x104>
    }
    else
    {
      printmsg("Backup SRAM data is safe \r\n");
 80006d2:	4822      	ldr	r0, [pc, #136]	@ (800075c <main+0x150>)
 80006d4:	f7ff ff74 	bl	80005c0 <printmsg>
 80006d8:	e01a      	b.n	8000710 <main+0x104>
    }
  }
  else
  {
    for(uint32_t i =0 ; i < strlen(write_buf)+1 ; i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
 80006de:	e00d      	b.n	80006fc <main+0xf0>
    {
      *(pBackupSRAMbase+i) = write_buf[i];
 80006e0:	f107 0210 	add.w	r2, r7, #16
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	4413      	add	r3, r2
 80006e8:	7819      	ldrb	r1, [r3, #0]
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	69ba      	ldr	r2, [r7, #24]
 80006f0:	4413      	add	r3, r2
 80006f2:	460a      	mov	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]
    for(uint32_t i =0 ; i < strlen(write_buf)+1 ; i++)
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3301      	adds	r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd85 	bl	8000210 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	3301      	adds	r3, #1
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	429a      	cmp	r2, r3
 800070e:	d3e7      	bcc.n	80006e0 <main+0xd4>
    }
  }

  printmsg("Press the user button to enter standby mode\r\n");
 8000710:	4813      	ldr	r0, [pc, #76]	@ (8000760 <main+0x154>)
 8000712:	f7ff ff55 	bl	80005c0 <printmsg>
  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) != GPIO_PIN_RESET) {}
 8000716:	bf00      	nop
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	4811      	ldr	r0, [pc, #68]	@ (8000764 <main+0x158>)
 800071e:	f000 fd31 	bl	8001184 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f7      	bne.n	8000718 <main+0x10c>

  //when user pushes the user button, it comes here
  printmsg("Going to Standby mode\r\n");
 8000728:	480f      	ldr	r0, [pc, #60]	@ (8000768 <main+0x15c>)
 800072a:	f7ff ff49 	bl	80005c0 <printmsg>

  //Enable the wakeup pin 1 in pwr_csr register
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800072e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000732:	f000 fd53 	bl	80011dc <HAL_PWR_EnableWakeUpPin>

  //Enable backup voltage reg.
  HAL_PWREx_EnableBkUpReg();
 8000736:	f000 fd7b 	bl	8001230 <HAL_PWREx_EnableBkUpReg>
  HAL_PWR_EnterSTANDBYMode();
 800073a:	f000 fd61 	bl	8001200 <HAL_PWR_EnterSTANDBYMode>

  while(1) {}
 800073e:	bf00      	nop
 8000740:	e7fd      	b.n	800073e <main+0x132>
 8000742:	bf00      	nop
 8000744:	08002fb8 	.word	0x08002fb8
 8000748:	40023800 	.word	0x40023800
 800074c:	40024000 	.word	0x40024000
 8000750:	40007000 	.word	0x40007000
 8000754:	08002f18 	.word	0x08002f18
 8000758:	08002f38 	.word	0x08002f38
 800075c:	08002f54 	.word	0x08002f54
 8000760:	08002f70 	.word	0x08002f70
 8000764:	40020800 	.word	0x40020800
 8000768:	08002fa0 	.word	0x08002fa0

0800076c <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 8000776:	2300      	movs	r3, #0
 8000778:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 800077c:	2307      	movs	r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 8000780:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000784:	623b      	str	r3, [r7, #32]
  Osc_Init.LSEState = RCC_LSE_ON;
 8000786:	2301      	movs	r3, #1
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  Osc_Init.HSIState = RCC_HSI_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b78      	cmp	r3, #120	@ 0x78
 800079c:	d038      	beq.n	8000810 <SystemClock_Config_HSE+0xa4>
 800079e:	2b78      	cmp	r3, #120	@ 0x78
 80007a0:	dc7c      	bgt.n	800089c <SystemClock_Config_HSE+0x130>
 80007a2:	2b32      	cmp	r3, #50	@ 0x32
 80007a4:	d002      	beq.n	80007ac <SystemClock_Config_HSE+0x40>
 80007a6:	2b54      	cmp	r3, #84	@ 0x54
 80007a8:	d019      	beq.n	80007de <SystemClock_Config_HSE+0x72>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80007aa:	e077      	b.n	800089c <SystemClock_Config_HSE+0x130>
    Osc_Init.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 80007b0:	2332      	movs	r3, #50	@ 0x32
 80007b2:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80007c0:	230f      	movs	r3, #15
 80007c2:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80007dc:	e032      	b.n	8000844 <SystemClock_Config_HSE+0xd8>
    Osc_Init.PLL.PLLM = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 80007e2:	2354      	movs	r3, #84	@ 0x54
 80007e4:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80007f2:	230f      	movs	r3, #15
 80007f4:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800080e:	e019      	b.n	8000844 <SystemClock_Config_HSE+0xd8>
    Osc_Init.PLL.PLLM = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000814:	2378      	movs	r3, #120	@ 0x78
 8000816:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000818:	2302      	movs	r3, #2
 800081a:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000824:	230f      	movs	r3, #15
 8000826:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000830:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000834:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083a:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 800083c:	2303      	movs	r3, #3
 800083e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000842:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4618      	mov	r0, r3
 800084a:	f001 f861 	bl	8001910 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config_HSE+0xec>
  {
    Error_handler();
 8000854:	f000 f874 	bl	8000940 <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000858:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fd0a 	bl	800127c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config_HSE+0x106>
  {
    Error_handler();
 800086e:	f000 f867 	bl	8000940 <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000872:	f000 fde9 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 8000876:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 8000878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <SystemClock_Config_HSE+0x138>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	099b      	lsrs	r3, r3, #6
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fab3 	bl	8000dee <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000888:	2004      	movs	r0, #4
 800088a:	f000 fabd 	bl	8000e08 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f000 fa80 	bl	8000d9a <HAL_NVIC_SetPriority>
 800089a:	e000      	b.n	800089e <SystemClock_Config_HSE+0x132>
    return ;
 800089c:	bf00      	nop
}
 800089e:	3758      	adds	r7, #88	@ 0x58
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	10624dd3 	.word	0x10624dd3

080008a8 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <GPIO_Init+0x44>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <GPIO_Init+0x44>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <GPIO_Init+0x44>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef  buttongpio;

  buttongpio.Pin = GPIO_PIN_13;
 80008ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ce:	607b      	str	r3, [r7, #4]
  buttongpio.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  buttongpio.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC,&buttongpio);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <GPIO_Init+0x48>)
 80008de:	f000 fabd 	bl	8000e5c <HAL_GPIO_Init>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800

080008f4 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <UART2_Init+0x44>)
 80008fa:	4a10      	ldr	r2, [pc, #64]	@ (800093c <UART2_Init+0x48>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate =115200;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <UART2_Init+0x44>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <UART2_Init+0x44>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <UART2_Init+0x44>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <UART2_Init+0x44>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <UART2_Init+0x44>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <UART2_Init+0x44>)
 8000920:	2208      	movs	r2, #8
 8000922:	615a      	str	r2, [r3, #20]

  if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <UART2_Init+0x44>)
 8000926:	f001 fa91 	bl	8001e4c <HAL_UART_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 8000930:	f000 f806 	bl	8000940 <Error_handler>
  }
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000078 	.word	0x20000078
 800093c:	40004400 	.word	0x40004400

08000940 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  while(1);
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_handler+0x4>

08000948 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 fa19 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <HAL_MspInit+0x40>)
 8000954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000956:	4a0c      	ldr	r2, [pc, #48]	@ (8000988 <HAL_MspInit+0x40>)
 8000958:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800095c:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	f06f 000b 	mvn.w	r0, #11
 8000966:	f000 fa18 	bl	8000d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	f06f 000a 	mvn.w	r0, #10
 8000972:	f000 fa12 	bl	8000d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	f06f 0009 	mvn.w	r0, #9
 800097e:	f000 fa0c 	bl	8000d9a <HAL_NVIC_SetPriority>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 80009cc:	2304      	movs	r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80009dc:	2307      	movs	r3, #7
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <HAL_UART_MspInit+0x8c>)
 80009e8:	f000 fa38 	bl	8000e5c <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80009ec:	2308      	movs	r3, #8
 80009ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <HAL_UART_MspInit+0x8c>)
 80009f8:	f000 fa30 	bl	8000e5c <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009fc:	2026      	movs	r0, #38	@ 0x26
 80009fe:	f000 f9e8 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2026      	movs	r0, #38	@ 0x26
 8000a08:	f000 f9c7 	bl	8000d9a <HAL_NVIC_SetPriority>
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	@ (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f001 fde0 	bl	8002610 <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20020000 	.word	0x20020000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	200000bc 	.word	0x200000bc
 8000a84:	20000210 	.word	0x20000210

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	@ (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f001 fd9f 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd95 	bl	800060c <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af0:	0800301c 	.word	0x0800301c
  ldr r2, =_sbss
 8000af4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000af8:	2000020c 	.word	0x2000020c

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f92b 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff ff08 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f943 	bl	8000dee <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f90b 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	200000c0 	.word	0x200000c0

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200000c0 	.word	0x200000c0

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d106      	bne.n	8000e24 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e22:	e005      	b.n	8000e30 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e2a:	f023 0304 	bic.w	r3, r3, #4
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e44:	f000 f802 	bl	8000e4c <HAL_SYSTICK_Callback>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e165      	b.n	8001144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f040 8154 	bne.w	800113e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d005      	beq.n	8000eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d130      	bne.n	8000f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d017      	beq.n	8000f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	69b9      	ldr	r1, [r7, #24]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80ae 	beq.w	800113e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800115c <HAL_GPIO_Init+0x300>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a5c      	ldr	r2, [pc, #368]	@ (800115c <HAL_GPIO_Init+0x300>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800115c <HAL_GPIO_Init+0x300>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffe:	4a58      	ldr	r2, [pc, #352]	@ (8001160 <HAL_GPIO_Init+0x304>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4f      	ldr	r2, [pc, #316]	@ (8001164 <HAL_GPIO_Init+0x308>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d025      	beq.n	8001076 <HAL_GPIO_Init+0x21a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4e      	ldr	r2, [pc, #312]	@ (8001168 <HAL_GPIO_Init+0x30c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01f      	beq.n	8001072 <HAL_GPIO_Init+0x216>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4d      	ldr	r2, [pc, #308]	@ (800116c <HAL_GPIO_Init+0x310>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x212>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4c      	ldr	r2, [pc, #304]	@ (8001170 <HAL_GPIO_Init+0x314>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x20e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4b      	ldr	r2, [pc, #300]	@ (8001174 <HAL_GPIO_Init+0x318>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x20a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4a      	ldr	r2, [pc, #296]	@ (8001178 <HAL_GPIO_Init+0x31c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x206>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a49      	ldr	r2, [pc, #292]	@ (800117c <HAL_GPIO_Init+0x320>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x202>
 800105a:	2306      	movs	r3, #6
 800105c:	e00c      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 800105e:	2307      	movs	r3, #7
 8001060:	e00a      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001062:	2305      	movs	r3, #5
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001066:	2304      	movs	r3, #4
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	@ (8001160 <HAL_GPIO_Init+0x304>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001096:	4b3a      	ldr	r3, [pc, #232]	@ (8001180 <HAL_GPIO_Init+0x324>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ba:	4a31      	ldr	r2, [pc, #196]	@ (8001180 <HAL_GPIO_Init+0x324>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <HAL_GPIO_Init+0x324>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e4:	4a26      	ldr	r2, [pc, #152]	@ (8001180 <HAL_GPIO_Init+0x324>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <HAL_GPIO_Init+0x324>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <HAL_GPIO_Init+0x324>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_GPIO_Init+0x324>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <HAL_GPIO_Init+0x324>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f ae96 	bls.w	8000e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40021400 	.word	0x40021400
 800117c:	40021800 	.word	0x40021800
 8001180:	40013c00 	.word	0x40013c00

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80011c6:	687b      	ldr	r3, [r7, #4]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	420e0020 	.word	0x420e0020
 80011d8:	40007000 	.word	0x40007000

080011dc <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_PWR_EnableWakeUpPin+0x20>)
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4904      	ldr	r1, [pc, #16]	@ (80011fc <HAL_PWR_EnableWakeUpPin+0x20>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40007000 	.word	0x40007000

08001200 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a05      	ldr	r2, [pc, #20]	@ (800122c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800121c:	bf30      	wfi
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40007000 	.word	0x40007000
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_PWREx_EnableBkUpReg+0x44>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001240:	f7ff fcc4 	bl	8000bcc <HAL_GetTick>
 8001244:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8001246:	e009      	b.n	800125c <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8001248:	f7ff fcc0 	bl	8000bcc <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001256:	d901      	bls.n	800125c <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e006      	b.n	800126a <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_PWREx_EnableBkUpReg+0x48>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b08      	cmp	r3, #8
 8001266:	d1ef      	bne.n	8001248 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	420e00a4 	.word	0x420e00a4
 8001278:	40007000 	.word	0x40007000

0800127c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0cc      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4b68      	ldr	r3, [pc, #416]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d90c      	bls.n	80012b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b65      	ldr	r3, [pc, #404]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	4b63      	ldr	r3, [pc, #396]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0b8      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d020      	beq.n	8001306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d0:	4b59      	ldr	r3, [pc, #356]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4a58      	ldr	r2, [pc, #352]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e8:	4b53      	ldr	r3, [pc, #332]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f4:	4b50      	ldr	r3, [pc, #320]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	494d      	ldr	r1, [pc, #308]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d044      	beq.n	800139c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d119      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e07f      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d003      	beq.n	800133a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001336:	2b03      	cmp	r3, #3
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133a:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e06f      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	4b3b      	ldr	r3, [pc, #236]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e067      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f023 0203 	bic.w	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4934      	ldr	r1, [pc, #208]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800136c:	f7ff fc2e 	bl	8000bcc <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	e00a      	b.n	800138a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f7ff fc2a 	bl	8000bcc <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e04f      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 020c 	and.w	r2, r3, #12
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	429a      	cmp	r2, r3
 800139a:	d1eb      	bne.n	8001374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800139c:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d20c      	bcs.n	80013c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e032      	b.n	800142a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4916      	ldr	r1, [pc, #88]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	490e      	ldr	r1, [pc, #56]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001402:	f000 f855 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 8001406:	4602      	mov	r2, r0
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	490a      	ldr	r1, [pc, #40]	@ (800143c <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	5ccb      	ldrb	r3, [r1, r3]
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_RCC_ClockConfig+0x1c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fb8e 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00
 8001438:	40023800 	.word	0x40023800
 800143c:	08002fc0 	.word	0x08002fc0
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <HAL_RCC_GetHCLKFreq+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000000 	.word	0x20000000

08001460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001464:	f7ff fff0 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	0a9b      	lsrs	r3, r3, #10
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	4903      	ldr	r1, [pc, #12]	@ (8001484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	08002fd0 	.word	0x08002fd0

08001488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800148c:	f7ff ffdc 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 8001490:	4602      	mov	r2, r0
 8001492:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	0b5b      	lsrs	r3, r3, #13
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	4903      	ldr	r1, [pc, #12]	@ (80014ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	08002fd0 	.word	0x08002fd0

080014b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014b4:	b0ae      	sub	sp, #184	@ 0xb8
 80014b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014d6:	4bcb      	ldr	r3, [pc, #812]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	f200 8206 	bhi.w	80018f0 <HAL_RCC_GetSysClockFreq+0x440>
 80014e4:	a201      	add	r2, pc, #4	@ (adr r2, 80014ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	08001521 	.word	0x08001521
 80014f0:	080018f1 	.word	0x080018f1
 80014f4:	080018f1 	.word	0x080018f1
 80014f8:	080018f1 	.word	0x080018f1
 80014fc:	08001529 	.word	0x08001529
 8001500:	080018f1 	.word	0x080018f1
 8001504:	080018f1 	.word	0x080018f1
 8001508:	080018f1 	.word	0x080018f1
 800150c:	08001531 	.word	0x08001531
 8001510:	080018f1 	.word	0x080018f1
 8001514:	080018f1 	.word	0x080018f1
 8001518:	080018f1 	.word	0x080018f1
 800151c:	08001721 	.word	0x08001721
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001520:	4bb9      	ldr	r3, [pc, #740]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x358>)
 8001522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001526:	e1e7      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001528:	4bb8      	ldr	r3, [pc, #736]	@ (800180c <HAL_RCC_GetSysClockFreq+0x35c>)
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800152e:	e1e3      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001530:	4bb4      	ldr	r3, [pc, #720]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800153c:	4bb1      	ldr	r3, [pc, #708]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d071      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001548:	4bae      	ldr	r3, [pc, #696]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	2200      	movs	r2, #0
 8001550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001554:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001558:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800155c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001560:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800156a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800156e:	4622      	mov	r2, r4
 8001570:	462b      	mov	r3, r5
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	0159      	lsls	r1, r3, #5
 800157c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001580:	0150      	lsls	r0, r2, #5
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4621      	mov	r1, r4
 8001588:	1a51      	subs	r1, r2, r1
 800158a:	6439      	str	r1, [r7, #64]	@ 0x40
 800158c:	4629      	mov	r1, r5
 800158e:	eb63 0301 	sbc.w	r3, r3, r1
 8001592:	647b      	str	r3, [r7, #68]	@ 0x44
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015a0:	4649      	mov	r1, r9
 80015a2:	018b      	lsls	r3, r1, #6
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015aa:	4641      	mov	r1, r8
 80015ac:	018a      	lsls	r2, r1, #6
 80015ae:	4641      	mov	r1, r8
 80015b0:	1a51      	subs	r1, r2, r1
 80015b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015b4:	4649      	mov	r1, r9
 80015b6:	eb63 0301 	sbc.w	r3, r3, r1
 80015ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015c8:	4649      	mov	r1, r9
 80015ca:	00cb      	lsls	r3, r1, #3
 80015cc:	4641      	mov	r1, r8
 80015ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015d2:	4641      	mov	r1, r8
 80015d4:	00ca      	lsls	r2, r1, #3
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	4622      	mov	r2, r4
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80015e2:	462b      	mov	r3, r5
 80015e4:	460a      	mov	r2, r1
 80015e6:	eb42 0303 	adc.w	r3, r2, r3
 80015ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015f8:	4629      	mov	r1, r5
 80015fa:	024b      	lsls	r3, r1, #9
 80015fc:	4621      	mov	r1, r4
 80015fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001602:	4621      	mov	r1, r4
 8001604:	024a      	lsls	r2, r1, #9
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800160e:	2200      	movs	r2, #0
 8001610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001614:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001618:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800161c:	f7fe fe50 	bl	80002c0 <__aeabi_uldivmod>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4613      	mov	r3, r2
 8001626:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800162a:	e067      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800162c:	4b75      	ldr	r3, [pc, #468]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	2200      	movs	r2, #0
 8001634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001638:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800163c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001644:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001646:	2300      	movs	r3, #0
 8001648:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800164a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800164e:	4622      	mov	r2, r4
 8001650:	462b      	mov	r3, r5
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	0159      	lsls	r1, r3, #5
 800165c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001660:	0150      	lsls	r0, r2, #5
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4621      	mov	r1, r4
 8001668:	1a51      	subs	r1, r2, r1
 800166a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800166c:	4629      	mov	r1, r5
 800166e:	eb63 0301 	sbc.w	r3, r3, r1
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001680:	4649      	mov	r1, r9
 8001682:	018b      	lsls	r3, r1, #6
 8001684:	4641      	mov	r1, r8
 8001686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800168a:	4641      	mov	r1, r8
 800168c:	018a      	lsls	r2, r1, #6
 800168e:	4641      	mov	r1, r8
 8001690:	ebb2 0a01 	subs.w	sl, r2, r1
 8001694:	4649      	mov	r1, r9
 8001696:	eb63 0b01 	sbc.w	fp, r3, r1
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016ae:	4692      	mov	sl, r2
 80016b0:	469b      	mov	fp, r3
 80016b2:	4623      	mov	r3, r4
 80016b4:	eb1a 0303 	adds.w	r3, sl, r3
 80016b8:	623b      	str	r3, [r7, #32]
 80016ba:	462b      	mov	r3, r5
 80016bc:	eb4b 0303 	adc.w	r3, fp, r3
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016ce:	4629      	mov	r1, r5
 80016d0:	028b      	lsls	r3, r1, #10
 80016d2:	4621      	mov	r1, r4
 80016d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016d8:	4621      	mov	r1, r4
 80016da:	028a      	lsls	r2, r1, #10
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016e4:	2200      	movs	r2, #0
 80016e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80016e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80016ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016ee:	f7fe fde7 	bl	80002c0 <__aeabi_uldivmod>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4613      	mov	r3, r2
 80016f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016fc:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	3301      	adds	r3, #1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800170e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800171e:	e0eb      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001720:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800172c:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d06b      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001738:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x354>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	2200      	movs	r2, #0
 8001740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001742:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174a:	663b      	str	r3, [r7, #96]	@ 0x60
 800174c:	2300      	movs	r3, #0
 800174e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001750:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001754:	4622      	mov	r2, r4
 8001756:	462b      	mov	r3, r5
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	0159      	lsls	r1, r3, #5
 8001762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001766:	0150      	lsls	r0, r2, #5
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4621      	mov	r1, r4
 800176e:	1a51      	subs	r1, r2, r1
 8001770:	61b9      	str	r1, [r7, #24]
 8001772:	4629      	mov	r1, r5
 8001774:	eb63 0301 	sbc.w	r3, r3, r1
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001786:	4659      	mov	r1, fp
 8001788:	018b      	lsls	r3, r1, #6
 800178a:	4651      	mov	r1, sl
 800178c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001790:	4651      	mov	r1, sl
 8001792:	018a      	lsls	r2, r1, #6
 8001794:	4651      	mov	r1, sl
 8001796:	ebb2 0801 	subs.w	r8, r2, r1
 800179a:	4659      	mov	r1, fp
 800179c:	eb63 0901 	sbc.w	r9, r3, r1
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b4:	4690      	mov	r8, r2
 80017b6:	4699      	mov	r9, r3
 80017b8:	4623      	mov	r3, r4
 80017ba:	eb18 0303 	adds.w	r3, r8, r3
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	462b      	mov	r3, r5
 80017c2:	eb49 0303 	adc.w	r3, r9, r3
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017d4:	4629      	mov	r1, r5
 80017d6:	024b      	lsls	r3, r1, #9
 80017d8:	4621      	mov	r1, r4
 80017da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017de:	4621      	mov	r1, r4
 80017e0:	024a      	lsls	r2, r1, #9
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017ea:	2200      	movs	r2, #0
 80017ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017f4:	f7fe fd64 	bl	80002c0 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001802:	e065      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x420>
 8001804:	40023800 	.word	0x40023800
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001810:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x458>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	2200      	movs	r2, #0
 8001818:	4618      	mov	r0, r3
 800181a:	4611      	mov	r1, r2
 800181c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001820:	653b      	str	r3, [r7, #80]	@ 0x50
 8001822:	2300      	movs	r3, #0
 8001824:	657b      	str	r3, [r7, #84]	@ 0x54
 8001826:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800182a:	4642      	mov	r2, r8
 800182c:	464b      	mov	r3, r9
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4641      	mov	r1, r8
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	4649      	mov	r1, r9
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800185c:	4659      	mov	r1, fp
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4651      	mov	r1, sl
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4651      	mov	r1, sl
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4651      	mov	r1, sl
 800186c:	1a54      	subs	r4, r2, r1
 800186e:	4659      	mov	r1, fp
 8001870:	eb63 0501 	sbc.w	r5, r3, r1
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	00eb      	lsls	r3, r5, #3
 800187e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	4614      	mov	r4, r2
 8001886:	461d      	mov	r5, r3
 8001888:	4643      	mov	r3, r8
 800188a:	18e3      	adds	r3, r4, r3
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	464b      	mov	r3, r9
 8001890:	eb45 0303 	adc.w	r3, r5, r3
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a2:	4629      	mov	r1, r5
 80018a4:	028b      	lsls	r3, r1, #10
 80018a6:	4621      	mov	r1, r4
 80018a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ac:	4621      	mov	r1, r4
 80018ae:	028a      	lsls	r2, r1, #10
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018b8:	2200      	movs	r2, #0
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018c2:	f7fe fcfd 	bl	80002c0 <__aeabi_uldivmod>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4613      	mov	r3, r2
 80018cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x458>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	0f1b      	lsrs	r3, r3, #28
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80018de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018ee:	e003      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_RCC_GetSysClockFreq+0x45c>)
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	37b8      	adds	r7, #184	@ 0xb8
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	00f42400 	.word	0x00f42400

08001910 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e28d      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8083 	beq.w	8001a36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001930:	4b94      	ldr	r3, [pc, #592]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b04      	cmp	r3, #4
 800193a:	d019      	beq.n	8001970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800193c:	4b91      	ldr	r3, [pc, #580]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001944:	2b08      	cmp	r3, #8
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001948:	4b8e      	ldr	r3, [pc, #568]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001954:	d00c      	beq.n	8001970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001956:	4b8b      	ldr	r3, [pc, #556]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d112      	bne.n	8001988 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001962:	4b88      	ldr	r3, [pc, #544]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800196e:	d10b      	bne.n	8001988 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	4b84      	ldr	r3, [pc, #528]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d05b      	beq.n	8001a34 <HAL_RCC_OscConfig+0x124>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d157      	bne.n	8001a34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e25a      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001990:	d106      	bne.n	80019a0 <HAL_RCC_OscConfig+0x90>
 8001992:	4b7c      	ldr	r3, [pc, #496]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7b      	ldr	r2, [pc, #492]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xcc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0xb4>
 80019aa:	4b76      	ldr	r3, [pc, #472]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a75      	ldr	r2, [pc, #468]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b73      	ldr	r3, [pc, #460]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a72      	ldr	r2, [pc, #456]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xcc>
 80019c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6b      	ldr	r2, [pc, #428]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f8f2 	bl	8000bcc <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f8ee 	bl	8000bcc <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	@ 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e21f      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b61      	ldr	r3, [pc, #388]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xdc>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f8de 	bl	8000bcc <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f8da 	bl	8000bcc <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e20b      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b57      	ldr	r3, [pc, #348]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x104>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d06f      	beq.n	8001b22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a42:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d017      	beq.n	8001a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d105      	bne.n	8001a66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a66:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d11c      	bne.n	8001aac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b44      	ldr	r3, [pc, #272]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x186>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e1d3      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b3b      	ldr	r3, [pc, #236]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4937      	ldr	r1, [pc, #220]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	e03a      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab4:	4b34      	ldr	r3, [pc, #208]	@ (8001b88 <HAL_RCC_OscConfig+0x278>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f887 	bl	8000bcc <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff f883 	bl	8000bcc <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1b4      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4925      	ldr	r1, [pc, #148]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <HAL_RCC_OscConfig+0x278>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f866 	bl	8000bcc <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff f862 	bl	8000bcc <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e193      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d036      	beq.n	8001b9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f846 	bl	8000bcc <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f842 	bl	8000bcc <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e173      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x234>
 8001b62:	e01b      	b.n	8001b9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f82f 	bl	8000bcc <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	e00e      	b.n	8001b90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff f82b 	bl	8000bcc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d907      	bls.n	8001b90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e15c      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000
 8001b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b8a      	ldr	r3, [pc, #552]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ea      	bne.n	8001b72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8097 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b83      	ldr	r3, [pc, #524]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bca:	4b7c      	ldr	r3, [pc, #496]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b79      	ldr	r3, [pc, #484]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b76      	ldr	r3, [pc, #472]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a75      	ldr	r2, [pc, #468]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7fe ffeb 	bl	8000bcc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7fe ffe7 	bl	8000bcc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e118      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001dc0 <HAL_RCC_OscConfig+0x4b0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x31e>
 8001c20:	4b66      	ldr	r3, [pc, #408]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c24:	4a65      	ldr	r2, [pc, #404]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0x358>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x340>
 8001c36:	4b61      	ldr	r3, [pc, #388]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3a:	4a60      	ldr	r2, [pc, #384]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c42:	4b5e      	ldr	r3, [pc, #376]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	4a5d      	ldr	r2, [pc, #372]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x358>
 8001c50:	4b5a      	ldr	r3, [pc, #360]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c54:	4a59      	ldr	r2, [pc, #356]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5c:	4b57      	ldr	r3, [pc, #348]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	4a56      	ldr	r2, [pc, #344]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	f023 0304 	bic.w	r3, r3, #4
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d015      	beq.n	8001c9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7fe ffac 	bl	8000bcc <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7fe ffa8 	bl	8000bcc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0d7      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ee      	beq.n	8001c78 <HAL_RCC_OscConfig+0x368>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7fe ff96 	bl	8000bcc <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7fe ff92 	bl	8000bcc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0c1      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ee      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80ad 	beq.w	8001e3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ce2:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d060      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d145      	bne.n	8001d82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b33      	ldr	r3, [pc, #204]	@ (8001dc4 <HAL_RCC_OscConfig+0x4b4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe ff66 	bl	8000bcc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe ff62 	bl	8000bcc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e093      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	071b      	lsls	r3, r3, #28
 8001d4e:	491b      	ldr	r1, [pc, #108]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_RCC_OscConfig+0x4b4>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7fe ff37 	bl	8000bcc <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d62:	f7fe ff33 	bl	8000bcc <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e064      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x452>
 8001d80:	e05c      	b.n	8001e3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_RCC_OscConfig+0x4b4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe ff20 	bl	8000bcc <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d90:	f7fe ff1c 	bl	8000bcc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04d      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x480>
 8001dae:	e045      	b.n	8001e3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e040      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <HAL_RCC_OscConfig+0x538>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d030      	beq.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d129      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d122      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d119      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10f      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e03f      	b.n	8001ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fd8a 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f929 	bl	80020e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b08a      	sub	sp, #40	@ 0x28
 8001eea:	af02      	add	r7, sp, #8
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d17c      	bne.n	8002000 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_UART_Transmit+0x2c>
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e075      	b.n	8002002 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_UART_Transmit+0x3e>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e06e      	b.n	8002002 <HAL_UART_Transmit+0x11c>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2221      	movs	r2, #33	@ 0x21
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f3a:	f7fe fe47 	bl	8000bcc <HAL_GetTick>
 8001f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	88fa      	ldrh	r2, [r7, #6]
 8001f44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f54:	d108      	bne.n	8001f68 <HAL_UART_Transmit+0x82>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d104      	bne.n	8001f68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e003      	b.n	8001f70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001f78:	e02a      	b.n	8001fd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f840 	bl	800200a <UART_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e036      	b.n	8002002 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	3302      	adds	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	e007      	b.n	8001fc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1cf      	bne.n	8001f7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2140      	movs	r1, #64	@ 0x40
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f810 	bl	800200a <UART_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e006      	b.n	8002002 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b090      	sub	sp, #64	@ 0x40
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800201a:	e050      	b.n	80020be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d04c      	beq.n	80020be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <UART_WaitOnFlagUntilTimeout+0x30>
 800202a:	f7fe fdcf 	bl	8000bcc <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002036:	429a      	cmp	r2, r3
 8002038:	d241      	bcs.n	80020be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800205a:	637a      	str	r2, [r7, #52]	@ 0x34
 800205c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800205e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002060:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002062:	e841 2300 	strex	r3, r2, [r1]
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1e5      	bne.n	800203a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3314      	adds	r3, #20
 8002074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	e853 3f00 	ldrex	r3, [r3]
 800207c:	613b      	str	r3, [r7, #16]
   return(result);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3314      	adds	r3, #20
 800208c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800208e:	623a      	str	r2, [r7, #32]
 8002090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002092:	69f9      	ldr	r1, [r7, #28]
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	e841 2300 	strex	r3, r2, [r1]
 800209a:	61bb      	str	r3, [r7, #24]
   return(result);
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1e5      	bne.n	800206e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e00f      	b.n	80020de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4013      	ands	r3, r2
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d09f      	beq.n	800201c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3740      	adds	r7, #64	@ 0x40
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ec:	b0c0      	sub	sp, #256	@ 0x100
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	ea40 0301 	orr.w	r3, r0, r1
 8002110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	431a      	orrs	r2, r3
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	431a      	orrs	r2, r3
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002140:	f021 010c 	bic.w	r1, r1, #12
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800214e:	430b      	orrs	r3, r1
 8002150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002162:	6999      	ldr	r1, [r3, #24]
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	ea40 0301 	orr.w	r3, r0, r1
 800216e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b8f      	ldr	r3, [pc, #572]	@ (80023b4 <UART_SetConfig+0x2cc>)
 8002178:	429a      	cmp	r2, r3
 800217a:	d005      	beq.n	8002188 <UART_SetConfig+0xa0>
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b8d      	ldr	r3, [pc, #564]	@ (80023b8 <UART_SetConfig+0x2d0>)
 8002184:	429a      	cmp	r2, r3
 8002186:	d104      	bne.n	8002192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002188:	f7ff f97e 	bl	8001488 <HAL_RCC_GetPCLK2Freq>
 800218c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002190:	e003      	b.n	800219a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002192:	f7ff f965 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 8002196:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800219a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a4:	f040 810c 	bne.w	80023c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ac:	2200      	movs	r2, #0
 80021ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80021b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	1891      	adds	r1, r2, r2
 80021c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80021c2:	415b      	adcs	r3, r3
 80021c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021ca:	4621      	mov	r1, r4
 80021cc:	eb12 0801 	adds.w	r8, r2, r1
 80021d0:	4629      	mov	r1, r5
 80021d2:	eb43 0901 	adc.w	r9, r3, r1
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	eb18 0303 	adds.w	r3, r8, r3
 80021f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80021f8:	462b      	mov	r3, r5
 80021fa:	eb49 0303 	adc.w	r3, r9, r3
 80021fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800220e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002216:	460b      	mov	r3, r1
 8002218:	18db      	adds	r3, r3, r3
 800221a:	653b      	str	r3, [r7, #80]	@ 0x50
 800221c:	4613      	mov	r3, r2
 800221e:	eb42 0303 	adc.w	r3, r2, r3
 8002222:	657b      	str	r3, [r7, #84]	@ 0x54
 8002224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800222c:	f7fe f848 	bl	80002c0 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4b61      	ldr	r3, [pc, #388]	@ (80023bc <UART_SetConfig+0x2d4>)
 8002236:	fba3 2302 	umull	r2, r3, r3, r2
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	011c      	lsls	r4, r3, #4
 800223e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002242:	2200      	movs	r2, #0
 8002244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002248:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800224c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	1891      	adds	r1, r2, r2
 8002256:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002258:	415b      	adcs	r3, r3
 800225a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800225c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002260:	4641      	mov	r1, r8
 8002262:	eb12 0a01 	adds.w	sl, r2, r1
 8002266:	4649      	mov	r1, r9
 8002268:	eb43 0b01 	adc.w	fp, r3, r1
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800227c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002280:	4692      	mov	sl, r2
 8002282:	469b      	mov	fp, r3
 8002284:	4643      	mov	r3, r8
 8002286:	eb1a 0303 	adds.w	r3, sl, r3
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800228e:	464b      	mov	r3, r9
 8002290:	eb4b 0303 	adc.w	r3, fp, r3
 8002294:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80022ac:	460b      	mov	r3, r1
 80022ae:	18db      	adds	r3, r3, r3
 80022b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80022b2:	4613      	mov	r3, r2
 80022b4:	eb42 0303 	adc.w	r3, r2, r3
 80022b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80022c2:	f7fd fffd 	bl	80002c0 <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <UART_SetConfig+0x2d4>)
 80022ce:	fba3 2301 	umull	r2, r3, r3, r1
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2264      	movs	r2, #100	@ 0x64
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	1acb      	subs	r3, r1, r3
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80022e2:	4b36      	ldr	r3, [pc, #216]	@ (80023bc <UART_SetConfig+0x2d4>)
 80022e4:	fba3 2302 	umull	r2, r3, r3, r2
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80022f0:	441c      	add	r4, r3
 80022f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022f6:	2200      	movs	r2, #0
 80022f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002304:	4642      	mov	r2, r8
 8002306:	464b      	mov	r3, r9
 8002308:	1891      	adds	r1, r2, r2
 800230a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800230c:	415b      	adcs	r3, r3
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002314:	4641      	mov	r1, r8
 8002316:	1851      	adds	r1, r2, r1
 8002318:	6339      	str	r1, [r7, #48]	@ 0x30
 800231a:	4649      	mov	r1, r9
 800231c:	414b      	adcs	r3, r1
 800231e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800232c:	4659      	mov	r1, fp
 800232e:	00cb      	lsls	r3, r1, #3
 8002330:	4651      	mov	r1, sl
 8002332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002336:	4651      	mov	r1, sl
 8002338:	00ca      	lsls	r2, r1, #3
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	4603      	mov	r3, r0
 8002340:	4642      	mov	r2, r8
 8002342:	189b      	adds	r3, r3, r2
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002348:	464b      	mov	r3, r9
 800234a:	460a      	mov	r2, r1
 800234c:	eb42 0303 	adc.w	r3, r2, r3
 8002350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002360:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002368:	460b      	mov	r3, r1
 800236a:	18db      	adds	r3, r3, r3
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800236e:	4613      	mov	r3, r2
 8002370:	eb42 0303 	adc.w	r3, r2, r3
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800237a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800237e:	f7fd ff9f 	bl	80002c0 <__aeabi_uldivmod>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <UART_SetConfig+0x2d4>)
 8002388:	fba3 1302 	umull	r1, r3, r3, r2
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	2164      	movs	r1, #100	@ 0x64
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	3332      	adds	r3, #50	@ 0x32
 800239a:	4a08      	ldr	r2, [pc, #32]	@ (80023bc <UART_SetConfig+0x2d4>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	f003 0207 	and.w	r2, r3, #7
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4422      	add	r2, r4
 80023ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023b0:	e106      	b.n	80025c0 <UART_SetConfig+0x4d8>
 80023b2:	bf00      	nop
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400
 80023bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80023ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80023ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80023d2:	4642      	mov	r2, r8
 80023d4:	464b      	mov	r3, r9
 80023d6:	1891      	adds	r1, r2, r2
 80023d8:	6239      	str	r1, [r7, #32]
 80023da:	415b      	adcs	r3, r3
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e2:	4641      	mov	r1, r8
 80023e4:	1854      	adds	r4, r2, r1
 80023e6:	4649      	mov	r1, r9
 80023e8:	eb43 0501 	adc.w	r5, r3, r1
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	00eb      	lsls	r3, r5, #3
 80023f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023fa:	00e2      	lsls	r2, r4, #3
 80023fc:	4614      	mov	r4, r2
 80023fe:	461d      	mov	r5, r3
 8002400:	4643      	mov	r3, r8
 8002402:	18e3      	adds	r3, r4, r3
 8002404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002408:	464b      	mov	r3, r9
 800240a:	eb45 0303 	adc.w	r3, r5, r3
 800240e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800241e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800242e:	4629      	mov	r1, r5
 8002430:	008b      	lsls	r3, r1, #2
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002438:	4621      	mov	r1, r4
 800243a:	008a      	lsls	r2, r1, #2
 800243c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002440:	f7fd ff3e 	bl	80002c0 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4b60      	ldr	r3, [pc, #384]	@ (80025cc <UART_SetConfig+0x4e4>)
 800244a:	fba3 2302 	umull	r2, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	011c      	lsls	r4, r3, #4
 8002452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002456:	2200      	movs	r2, #0
 8002458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800245c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002464:	4642      	mov	r2, r8
 8002466:	464b      	mov	r3, r9
 8002468:	1891      	adds	r1, r2, r2
 800246a:	61b9      	str	r1, [r7, #24]
 800246c:	415b      	adcs	r3, r3
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002474:	4641      	mov	r1, r8
 8002476:	1851      	adds	r1, r2, r1
 8002478:	6139      	str	r1, [r7, #16]
 800247a:	4649      	mov	r1, r9
 800247c:	414b      	adcs	r3, r1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800248c:	4659      	mov	r1, fp
 800248e:	00cb      	lsls	r3, r1, #3
 8002490:	4651      	mov	r1, sl
 8002492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002496:	4651      	mov	r1, sl
 8002498:	00ca      	lsls	r2, r1, #3
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	4642      	mov	r2, r8
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024a8:	464b      	mov	r3, r9
 80024aa:	460a      	mov	r2, r1
 80024ac:	eb42 0303 	adc.w	r3, r2, r3
 80024b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80024cc:	4649      	mov	r1, r9
 80024ce:	008b      	lsls	r3, r1, #2
 80024d0:	4641      	mov	r1, r8
 80024d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d6:	4641      	mov	r1, r8
 80024d8:	008a      	lsls	r2, r1, #2
 80024da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80024de:	f7fd feef 	bl	80002c0 <__aeabi_uldivmod>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <UART_SetConfig+0x4e4>)
 80024ea:	fba3 2301 	umull	r2, r3, r3, r1
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2264      	movs	r2, #100	@ 0x64
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	1acb      	subs	r3, r1, r3
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	3332      	adds	r3, #50	@ 0x32
 80024fc:	4a33      	ldr	r2, [pc, #204]	@ (80025cc <UART_SetConfig+0x4e4>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002508:	441c      	add	r4, r3
 800250a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800250e:	2200      	movs	r2, #0
 8002510:	673b      	str	r3, [r7, #112]	@ 0x70
 8002512:	677a      	str	r2, [r7, #116]	@ 0x74
 8002514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002518:	4642      	mov	r2, r8
 800251a:	464b      	mov	r3, r9
 800251c:	1891      	adds	r1, r2, r2
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	415b      	adcs	r3, r3
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002528:	4641      	mov	r1, r8
 800252a:	1851      	adds	r1, r2, r1
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	4649      	mov	r1, r9
 8002530:	414b      	adcs	r3, r1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002540:	4659      	mov	r1, fp
 8002542:	00cb      	lsls	r3, r1, #3
 8002544:	4651      	mov	r1, sl
 8002546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800254a:	4651      	mov	r1, sl
 800254c:	00ca      	lsls	r2, r1, #3
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	4603      	mov	r3, r0
 8002554:	4642      	mov	r2, r8
 8002556:	189b      	adds	r3, r3, r2
 8002558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800255a:	464b      	mov	r3, r9
 800255c:	460a      	mov	r2, r1
 800255e:	eb42 0303 	adc.w	r3, r2, r3
 8002562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	663b      	str	r3, [r7, #96]	@ 0x60
 800256e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800257c:	4649      	mov	r1, r9
 800257e:	008b      	lsls	r3, r1, #2
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002586:	4641      	mov	r1, r8
 8002588:	008a      	lsls	r2, r1, #2
 800258a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800258e:	f7fd fe97 	bl	80002c0 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <UART_SetConfig+0x4e4>)
 8002598:	fba3 1302 	umull	r1, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2164      	movs	r1, #100	@ 0x64
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	3332      	adds	r3, #50	@ 0x32
 80025aa:	4a08      	ldr	r2, [pc, #32]	@ (80025cc <UART_SetConfig+0x4e4>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4422      	add	r2, r4
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80025c6:	46bd      	mov	sp, r7
 80025c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025cc:	51eb851f 	.word	0x51eb851f

080025d0 <_vsiprintf_r>:
 80025d0:	b500      	push	{lr}
 80025d2:	b09b      	sub	sp, #108	@ 0x6c
 80025d4:	9100      	str	r1, [sp, #0]
 80025d6:	9104      	str	r1, [sp, #16]
 80025d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80025dc:	9105      	str	r1, [sp, #20]
 80025de:	9102      	str	r1, [sp, #8]
 80025e0:	4905      	ldr	r1, [pc, #20]	@ (80025f8 <_vsiprintf_r+0x28>)
 80025e2:	9103      	str	r1, [sp, #12]
 80025e4:	4669      	mov	r1, sp
 80025e6:	f000 f993 	bl	8002910 <_svfiprintf_r>
 80025ea:	9b00      	ldr	r3, [sp, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	b01b      	add	sp, #108	@ 0x6c
 80025f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80025f6:	bf00      	nop
 80025f8:	ffff0208 	.word	0xffff0208

080025fc <vsiprintf>:
 80025fc:	4613      	mov	r3, r2
 80025fe:	460a      	mov	r2, r1
 8002600:	4601      	mov	r1, r0
 8002602:	4802      	ldr	r0, [pc, #8]	@ (800260c <vsiprintf+0x10>)
 8002604:	6800      	ldr	r0, [r0, #0]
 8002606:	f7ff bfe3 	b.w	80025d0 <_vsiprintf_r>
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c

08002610 <__errno>:
 8002610:	4b01      	ldr	r3, [pc, #4]	@ (8002618 <__errno+0x8>)
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000000c 	.word	0x2000000c

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4d0d      	ldr	r5, [pc, #52]	@ (8002654 <__libc_init_array+0x38>)
 8002620:	4c0d      	ldr	r4, [pc, #52]	@ (8002658 <__libc_init_array+0x3c>)
 8002622:	1b64      	subs	r4, r4, r5
 8002624:	10a4      	asrs	r4, r4, #2
 8002626:	2600      	movs	r6, #0
 8002628:	42a6      	cmp	r6, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	4d0b      	ldr	r5, [pc, #44]	@ (800265c <__libc_init_array+0x40>)
 800262e:	4c0c      	ldr	r4, [pc, #48]	@ (8002660 <__libc_init_array+0x44>)
 8002630:	f000 fc66 	bl	8002f00 <_init>
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	2600      	movs	r6, #0
 800263a:	42a6      	cmp	r6, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f855 3b04 	ldr.w	r3, [r5], #4
 8002644:	4798      	blx	r3
 8002646:	3601      	adds	r6, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f855 3b04 	ldr.w	r3, [r5], #4
 800264e:	4798      	blx	r3
 8002650:	3601      	adds	r6, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	08003014 	.word	0x08003014
 8002658:	08003014 	.word	0x08003014
 800265c:	08003014 	.word	0x08003014
 8002660:	08003018 	.word	0x08003018

08002664 <__retarget_lock_acquire_recursive>:
 8002664:	4770      	bx	lr

08002666 <__retarget_lock_release_recursive>:
 8002666:	4770      	bx	lr

08002668 <_free_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4605      	mov	r5, r0
 800266c:	2900      	cmp	r1, #0
 800266e:	d041      	beq.n	80026f4 <_free_r+0x8c>
 8002670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002674:	1f0c      	subs	r4, r1, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	bfb8      	it	lt
 800267a:	18e4      	addlt	r4, r4, r3
 800267c:	f000 f8e0 	bl	8002840 <__malloc_lock>
 8002680:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <_free_r+0x90>)
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	b933      	cbnz	r3, 8002694 <_free_r+0x2c>
 8002686:	6063      	str	r3, [r4, #4]
 8002688:	6014      	str	r4, [r2, #0]
 800268a:	4628      	mov	r0, r5
 800268c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002690:	f000 b8dc 	b.w	800284c <__malloc_unlock>
 8002694:	42a3      	cmp	r3, r4
 8002696:	d908      	bls.n	80026aa <_free_r+0x42>
 8002698:	6820      	ldr	r0, [r4, #0]
 800269a:	1821      	adds	r1, r4, r0
 800269c:	428b      	cmp	r3, r1
 800269e:	bf01      	itttt	eq
 80026a0:	6819      	ldreq	r1, [r3, #0]
 80026a2:	685b      	ldreq	r3, [r3, #4]
 80026a4:	1809      	addeq	r1, r1, r0
 80026a6:	6021      	streq	r1, [r4, #0]
 80026a8:	e7ed      	b.n	8002686 <_free_r+0x1e>
 80026aa:	461a      	mov	r2, r3
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	b10b      	cbz	r3, 80026b4 <_free_r+0x4c>
 80026b0:	42a3      	cmp	r3, r4
 80026b2:	d9fa      	bls.n	80026aa <_free_r+0x42>
 80026b4:	6811      	ldr	r1, [r2, #0]
 80026b6:	1850      	adds	r0, r2, r1
 80026b8:	42a0      	cmp	r0, r4
 80026ba:	d10b      	bne.n	80026d4 <_free_r+0x6c>
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	4401      	add	r1, r0
 80026c0:	1850      	adds	r0, r2, r1
 80026c2:	4283      	cmp	r3, r0
 80026c4:	6011      	str	r1, [r2, #0]
 80026c6:	d1e0      	bne.n	800268a <_free_r+0x22>
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	6053      	str	r3, [r2, #4]
 80026ce:	4408      	add	r0, r1
 80026d0:	6010      	str	r0, [r2, #0]
 80026d2:	e7da      	b.n	800268a <_free_r+0x22>
 80026d4:	d902      	bls.n	80026dc <_free_r+0x74>
 80026d6:	230c      	movs	r3, #12
 80026d8:	602b      	str	r3, [r5, #0]
 80026da:	e7d6      	b.n	800268a <_free_r+0x22>
 80026dc:	6820      	ldr	r0, [r4, #0]
 80026de:	1821      	adds	r1, r4, r0
 80026e0:	428b      	cmp	r3, r1
 80026e2:	bf04      	itt	eq
 80026e4:	6819      	ldreq	r1, [r3, #0]
 80026e6:	685b      	ldreq	r3, [r3, #4]
 80026e8:	6063      	str	r3, [r4, #4]
 80026ea:	bf04      	itt	eq
 80026ec:	1809      	addeq	r1, r1, r0
 80026ee:	6021      	streq	r1, [r4, #0]
 80026f0:	6054      	str	r4, [r2, #4]
 80026f2:	e7ca      	b.n	800268a <_free_r+0x22>
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
 80026f6:	bf00      	nop
 80026f8:	20000208 	.word	0x20000208

080026fc <sbrk_aligned>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	4e0f      	ldr	r6, [pc, #60]	@ (800273c <sbrk_aligned+0x40>)
 8002700:	460c      	mov	r4, r1
 8002702:	6831      	ldr	r1, [r6, #0]
 8002704:	4605      	mov	r5, r0
 8002706:	b911      	cbnz	r1, 800270e <sbrk_aligned+0x12>
 8002708:	f000 fba6 	bl	8002e58 <_sbrk_r>
 800270c:	6030      	str	r0, [r6, #0]
 800270e:	4621      	mov	r1, r4
 8002710:	4628      	mov	r0, r5
 8002712:	f000 fba1 	bl	8002e58 <_sbrk_r>
 8002716:	1c43      	adds	r3, r0, #1
 8002718:	d103      	bne.n	8002722 <sbrk_aligned+0x26>
 800271a:	f04f 34ff 	mov.w	r4, #4294967295
 800271e:	4620      	mov	r0, r4
 8002720:	bd70      	pop	{r4, r5, r6, pc}
 8002722:	1cc4      	adds	r4, r0, #3
 8002724:	f024 0403 	bic.w	r4, r4, #3
 8002728:	42a0      	cmp	r0, r4
 800272a:	d0f8      	beq.n	800271e <sbrk_aligned+0x22>
 800272c:	1a21      	subs	r1, r4, r0
 800272e:	4628      	mov	r0, r5
 8002730:	f000 fb92 	bl	8002e58 <_sbrk_r>
 8002734:	3001      	adds	r0, #1
 8002736:	d1f2      	bne.n	800271e <sbrk_aligned+0x22>
 8002738:	e7ef      	b.n	800271a <sbrk_aligned+0x1e>
 800273a:	bf00      	nop
 800273c:	20000204 	.word	0x20000204

08002740 <_malloc_r>:
 8002740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002744:	1ccd      	adds	r5, r1, #3
 8002746:	f025 0503 	bic.w	r5, r5, #3
 800274a:	3508      	adds	r5, #8
 800274c:	2d0c      	cmp	r5, #12
 800274e:	bf38      	it	cc
 8002750:	250c      	movcc	r5, #12
 8002752:	2d00      	cmp	r5, #0
 8002754:	4606      	mov	r6, r0
 8002756:	db01      	blt.n	800275c <_malloc_r+0x1c>
 8002758:	42a9      	cmp	r1, r5
 800275a:	d904      	bls.n	8002766 <_malloc_r+0x26>
 800275c:	230c      	movs	r3, #12
 800275e:	6033      	str	r3, [r6, #0]
 8002760:	2000      	movs	r0, #0
 8002762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002766:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800283c <_malloc_r+0xfc>
 800276a:	f000 f869 	bl	8002840 <__malloc_lock>
 800276e:	f8d8 3000 	ldr.w	r3, [r8]
 8002772:	461c      	mov	r4, r3
 8002774:	bb44      	cbnz	r4, 80027c8 <_malloc_r+0x88>
 8002776:	4629      	mov	r1, r5
 8002778:	4630      	mov	r0, r6
 800277a:	f7ff ffbf 	bl	80026fc <sbrk_aligned>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	4604      	mov	r4, r0
 8002782:	d158      	bne.n	8002836 <_malloc_r+0xf6>
 8002784:	f8d8 4000 	ldr.w	r4, [r8]
 8002788:	4627      	mov	r7, r4
 800278a:	2f00      	cmp	r7, #0
 800278c:	d143      	bne.n	8002816 <_malloc_r+0xd6>
 800278e:	2c00      	cmp	r4, #0
 8002790:	d04b      	beq.n	800282a <_malloc_r+0xea>
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	4639      	mov	r1, r7
 8002796:	4630      	mov	r0, r6
 8002798:	eb04 0903 	add.w	r9, r4, r3
 800279c:	f000 fb5c 	bl	8002e58 <_sbrk_r>
 80027a0:	4581      	cmp	r9, r0
 80027a2:	d142      	bne.n	800282a <_malloc_r+0xea>
 80027a4:	6821      	ldr	r1, [r4, #0]
 80027a6:	1a6d      	subs	r5, r5, r1
 80027a8:	4629      	mov	r1, r5
 80027aa:	4630      	mov	r0, r6
 80027ac:	f7ff ffa6 	bl	80026fc <sbrk_aligned>
 80027b0:	3001      	adds	r0, #1
 80027b2:	d03a      	beq.n	800282a <_malloc_r+0xea>
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	442b      	add	r3, r5
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	f8d8 3000 	ldr.w	r3, [r8]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	bb62      	cbnz	r2, 800281c <_malloc_r+0xdc>
 80027c2:	f8c8 7000 	str.w	r7, [r8]
 80027c6:	e00f      	b.n	80027e8 <_malloc_r+0xa8>
 80027c8:	6822      	ldr	r2, [r4, #0]
 80027ca:	1b52      	subs	r2, r2, r5
 80027cc:	d420      	bmi.n	8002810 <_malloc_r+0xd0>
 80027ce:	2a0b      	cmp	r2, #11
 80027d0:	d917      	bls.n	8002802 <_malloc_r+0xc2>
 80027d2:	1961      	adds	r1, r4, r5
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	6025      	str	r5, [r4, #0]
 80027d8:	bf18      	it	ne
 80027da:	6059      	strne	r1, [r3, #4]
 80027dc:	6863      	ldr	r3, [r4, #4]
 80027de:	bf08      	it	eq
 80027e0:	f8c8 1000 	streq.w	r1, [r8]
 80027e4:	5162      	str	r2, [r4, r5]
 80027e6:	604b      	str	r3, [r1, #4]
 80027e8:	4630      	mov	r0, r6
 80027ea:	f000 f82f 	bl	800284c <__malloc_unlock>
 80027ee:	f104 000b 	add.w	r0, r4, #11
 80027f2:	1d23      	adds	r3, r4, #4
 80027f4:	f020 0007 	bic.w	r0, r0, #7
 80027f8:	1ac2      	subs	r2, r0, r3
 80027fa:	bf1c      	itt	ne
 80027fc:	1a1b      	subne	r3, r3, r0
 80027fe:	50a3      	strne	r3, [r4, r2]
 8002800:	e7af      	b.n	8002762 <_malloc_r+0x22>
 8002802:	6862      	ldr	r2, [r4, #4]
 8002804:	42a3      	cmp	r3, r4
 8002806:	bf0c      	ite	eq
 8002808:	f8c8 2000 	streq.w	r2, [r8]
 800280c:	605a      	strne	r2, [r3, #4]
 800280e:	e7eb      	b.n	80027e8 <_malloc_r+0xa8>
 8002810:	4623      	mov	r3, r4
 8002812:	6864      	ldr	r4, [r4, #4]
 8002814:	e7ae      	b.n	8002774 <_malloc_r+0x34>
 8002816:	463c      	mov	r4, r7
 8002818:	687f      	ldr	r7, [r7, #4]
 800281a:	e7b6      	b.n	800278a <_malloc_r+0x4a>
 800281c:	461a      	mov	r2, r3
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	42a3      	cmp	r3, r4
 8002822:	d1fb      	bne.n	800281c <_malloc_r+0xdc>
 8002824:	2300      	movs	r3, #0
 8002826:	6053      	str	r3, [r2, #4]
 8002828:	e7de      	b.n	80027e8 <_malloc_r+0xa8>
 800282a:	230c      	movs	r3, #12
 800282c:	6033      	str	r3, [r6, #0]
 800282e:	4630      	mov	r0, r6
 8002830:	f000 f80c 	bl	800284c <__malloc_unlock>
 8002834:	e794      	b.n	8002760 <_malloc_r+0x20>
 8002836:	6005      	str	r5, [r0, #0]
 8002838:	e7d6      	b.n	80027e8 <_malloc_r+0xa8>
 800283a:	bf00      	nop
 800283c:	20000208 	.word	0x20000208

08002840 <__malloc_lock>:
 8002840:	4801      	ldr	r0, [pc, #4]	@ (8002848 <__malloc_lock+0x8>)
 8002842:	f7ff bf0f 	b.w	8002664 <__retarget_lock_acquire_recursive>
 8002846:	bf00      	nop
 8002848:	20000200 	.word	0x20000200

0800284c <__malloc_unlock>:
 800284c:	4801      	ldr	r0, [pc, #4]	@ (8002854 <__malloc_unlock+0x8>)
 800284e:	f7ff bf0a 	b.w	8002666 <__retarget_lock_release_recursive>
 8002852:	bf00      	nop
 8002854:	20000200 	.word	0x20000200

08002858 <__ssputs_r>:
 8002858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800285c:	688e      	ldr	r6, [r1, #8]
 800285e:	461f      	mov	r7, r3
 8002860:	42be      	cmp	r6, r7
 8002862:	680b      	ldr	r3, [r1, #0]
 8002864:	4682      	mov	sl, r0
 8002866:	460c      	mov	r4, r1
 8002868:	4690      	mov	r8, r2
 800286a:	d82d      	bhi.n	80028c8 <__ssputs_r+0x70>
 800286c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002870:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002874:	d026      	beq.n	80028c4 <__ssputs_r+0x6c>
 8002876:	6965      	ldr	r5, [r4, #20]
 8002878:	6909      	ldr	r1, [r1, #16]
 800287a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800287e:	eba3 0901 	sub.w	r9, r3, r1
 8002882:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002886:	1c7b      	adds	r3, r7, #1
 8002888:	444b      	add	r3, r9
 800288a:	106d      	asrs	r5, r5, #1
 800288c:	429d      	cmp	r5, r3
 800288e:	bf38      	it	cc
 8002890:	461d      	movcc	r5, r3
 8002892:	0553      	lsls	r3, r2, #21
 8002894:	d527      	bpl.n	80028e6 <__ssputs_r+0x8e>
 8002896:	4629      	mov	r1, r5
 8002898:	f7ff ff52 	bl	8002740 <_malloc_r>
 800289c:	4606      	mov	r6, r0
 800289e:	b360      	cbz	r0, 80028fa <__ssputs_r+0xa2>
 80028a0:	6921      	ldr	r1, [r4, #16]
 80028a2:	464a      	mov	r2, r9
 80028a4:	f000 fae8 	bl	8002e78 <memcpy>
 80028a8:	89a3      	ldrh	r3, [r4, #12]
 80028aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80028ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b2:	81a3      	strh	r3, [r4, #12]
 80028b4:	6126      	str	r6, [r4, #16]
 80028b6:	6165      	str	r5, [r4, #20]
 80028b8:	444e      	add	r6, r9
 80028ba:	eba5 0509 	sub.w	r5, r5, r9
 80028be:	6026      	str	r6, [r4, #0]
 80028c0:	60a5      	str	r5, [r4, #8]
 80028c2:	463e      	mov	r6, r7
 80028c4:	42be      	cmp	r6, r7
 80028c6:	d900      	bls.n	80028ca <__ssputs_r+0x72>
 80028c8:	463e      	mov	r6, r7
 80028ca:	6820      	ldr	r0, [r4, #0]
 80028cc:	4632      	mov	r2, r6
 80028ce:	4641      	mov	r1, r8
 80028d0:	f000 faa8 	bl	8002e24 <memmove>
 80028d4:	68a3      	ldr	r3, [r4, #8]
 80028d6:	1b9b      	subs	r3, r3, r6
 80028d8:	60a3      	str	r3, [r4, #8]
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	4433      	add	r3, r6
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	2000      	movs	r0, #0
 80028e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028e6:	462a      	mov	r2, r5
 80028e8:	f000 fad4 	bl	8002e94 <_realloc_r>
 80028ec:	4606      	mov	r6, r0
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1e0      	bne.n	80028b4 <__ssputs_r+0x5c>
 80028f2:	6921      	ldr	r1, [r4, #16]
 80028f4:	4650      	mov	r0, sl
 80028f6:	f7ff feb7 	bl	8002668 <_free_r>
 80028fa:	230c      	movs	r3, #12
 80028fc:	f8ca 3000 	str.w	r3, [sl]
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002906:	81a3      	strh	r3, [r4, #12]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	e7e9      	b.n	80028e2 <__ssputs_r+0x8a>
	...

08002910 <_svfiprintf_r>:
 8002910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002914:	4698      	mov	r8, r3
 8002916:	898b      	ldrh	r3, [r1, #12]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	b09d      	sub	sp, #116	@ 0x74
 800291c:	4607      	mov	r7, r0
 800291e:	460d      	mov	r5, r1
 8002920:	4614      	mov	r4, r2
 8002922:	d510      	bpl.n	8002946 <_svfiprintf_r+0x36>
 8002924:	690b      	ldr	r3, [r1, #16]
 8002926:	b973      	cbnz	r3, 8002946 <_svfiprintf_r+0x36>
 8002928:	2140      	movs	r1, #64	@ 0x40
 800292a:	f7ff ff09 	bl	8002740 <_malloc_r>
 800292e:	6028      	str	r0, [r5, #0]
 8002930:	6128      	str	r0, [r5, #16]
 8002932:	b930      	cbnz	r0, 8002942 <_svfiprintf_r+0x32>
 8002934:	230c      	movs	r3, #12
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	b01d      	add	sp, #116	@ 0x74
 800293e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002942:	2340      	movs	r3, #64	@ 0x40
 8002944:	616b      	str	r3, [r5, #20]
 8002946:	2300      	movs	r3, #0
 8002948:	9309      	str	r3, [sp, #36]	@ 0x24
 800294a:	2320      	movs	r3, #32
 800294c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002950:	f8cd 800c 	str.w	r8, [sp, #12]
 8002954:	2330      	movs	r3, #48	@ 0x30
 8002956:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002af4 <_svfiprintf_r+0x1e4>
 800295a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800295e:	f04f 0901 	mov.w	r9, #1
 8002962:	4623      	mov	r3, r4
 8002964:	469a      	mov	sl, r3
 8002966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800296a:	b10a      	cbz	r2, 8002970 <_svfiprintf_r+0x60>
 800296c:	2a25      	cmp	r2, #37	@ 0x25
 800296e:	d1f9      	bne.n	8002964 <_svfiprintf_r+0x54>
 8002970:	ebba 0b04 	subs.w	fp, sl, r4
 8002974:	d00b      	beq.n	800298e <_svfiprintf_r+0x7e>
 8002976:	465b      	mov	r3, fp
 8002978:	4622      	mov	r2, r4
 800297a:	4629      	mov	r1, r5
 800297c:	4638      	mov	r0, r7
 800297e:	f7ff ff6b 	bl	8002858 <__ssputs_r>
 8002982:	3001      	adds	r0, #1
 8002984:	f000 80a7 	beq.w	8002ad6 <_svfiprintf_r+0x1c6>
 8002988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800298a:	445a      	add	r2, fp
 800298c:	9209      	str	r2, [sp, #36]	@ 0x24
 800298e:	f89a 3000 	ldrb.w	r3, [sl]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 809f 	beq.w	8002ad6 <_svfiprintf_r+0x1c6>
 8002998:	2300      	movs	r3, #0
 800299a:	f04f 32ff 	mov.w	r2, #4294967295
 800299e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029a2:	f10a 0a01 	add.w	sl, sl, #1
 80029a6:	9304      	str	r3, [sp, #16]
 80029a8:	9307      	str	r3, [sp, #28]
 80029aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80029b0:	4654      	mov	r4, sl
 80029b2:	2205      	movs	r2, #5
 80029b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b8:	484e      	ldr	r0, [pc, #312]	@ (8002af4 <_svfiprintf_r+0x1e4>)
 80029ba:	f7fd fc31 	bl	8000220 <memchr>
 80029be:	9a04      	ldr	r2, [sp, #16]
 80029c0:	b9d8      	cbnz	r0, 80029fa <_svfiprintf_r+0xea>
 80029c2:	06d0      	lsls	r0, r2, #27
 80029c4:	bf44      	itt	mi
 80029c6:	2320      	movmi	r3, #32
 80029c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029cc:	0711      	lsls	r1, r2, #28
 80029ce:	bf44      	itt	mi
 80029d0:	232b      	movmi	r3, #43	@ 0x2b
 80029d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029d6:	f89a 3000 	ldrb.w	r3, [sl]
 80029da:	2b2a      	cmp	r3, #42	@ 0x2a
 80029dc:	d015      	beq.n	8002a0a <_svfiprintf_r+0xfa>
 80029de:	9a07      	ldr	r2, [sp, #28]
 80029e0:	4654      	mov	r4, sl
 80029e2:	2000      	movs	r0, #0
 80029e4:	f04f 0c0a 	mov.w	ip, #10
 80029e8:	4621      	mov	r1, r4
 80029ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029ee:	3b30      	subs	r3, #48	@ 0x30
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d94b      	bls.n	8002a8c <_svfiprintf_r+0x17c>
 80029f4:	b1b0      	cbz	r0, 8002a24 <_svfiprintf_r+0x114>
 80029f6:	9207      	str	r2, [sp, #28]
 80029f8:	e014      	b.n	8002a24 <_svfiprintf_r+0x114>
 80029fa:	eba0 0308 	sub.w	r3, r0, r8
 80029fe:	fa09 f303 	lsl.w	r3, r9, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	9304      	str	r3, [sp, #16]
 8002a06:	46a2      	mov	sl, r4
 8002a08:	e7d2      	b.n	80029b0 <_svfiprintf_r+0xa0>
 8002a0a:	9b03      	ldr	r3, [sp, #12]
 8002a0c:	1d19      	adds	r1, r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	9103      	str	r1, [sp, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bfbb      	ittet	lt
 8002a16:	425b      	neglt	r3, r3
 8002a18:	f042 0202 	orrlt.w	r2, r2, #2
 8002a1c:	9307      	strge	r3, [sp, #28]
 8002a1e:	9307      	strlt	r3, [sp, #28]
 8002a20:	bfb8      	it	lt
 8002a22:	9204      	strlt	r2, [sp, #16]
 8002a24:	7823      	ldrb	r3, [r4, #0]
 8002a26:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a28:	d10a      	bne.n	8002a40 <_svfiprintf_r+0x130>
 8002a2a:	7863      	ldrb	r3, [r4, #1]
 8002a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a2e:	d132      	bne.n	8002a96 <_svfiprintf_r+0x186>
 8002a30:	9b03      	ldr	r3, [sp, #12]
 8002a32:	1d1a      	adds	r2, r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	9203      	str	r2, [sp, #12]
 8002a38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a3c:	3402      	adds	r4, #2
 8002a3e:	9305      	str	r3, [sp, #20]
 8002a40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002b04 <_svfiprintf_r+0x1f4>
 8002a44:	7821      	ldrb	r1, [r4, #0]
 8002a46:	2203      	movs	r2, #3
 8002a48:	4650      	mov	r0, sl
 8002a4a:	f7fd fbe9 	bl	8000220 <memchr>
 8002a4e:	b138      	cbz	r0, 8002a60 <_svfiprintf_r+0x150>
 8002a50:	9b04      	ldr	r3, [sp, #16]
 8002a52:	eba0 000a 	sub.w	r0, r0, sl
 8002a56:	2240      	movs	r2, #64	@ 0x40
 8002a58:	4082      	lsls	r2, r0
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	3401      	adds	r4, #1
 8002a5e:	9304      	str	r3, [sp, #16]
 8002a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a64:	4824      	ldr	r0, [pc, #144]	@ (8002af8 <_svfiprintf_r+0x1e8>)
 8002a66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a6a:	2206      	movs	r2, #6
 8002a6c:	f7fd fbd8 	bl	8000220 <memchr>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d036      	beq.n	8002ae2 <_svfiprintf_r+0x1d2>
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <_svfiprintf_r+0x1ec>)
 8002a76:	bb1b      	cbnz	r3, 8002ac0 <_svfiprintf_r+0x1b0>
 8002a78:	9b03      	ldr	r3, [sp, #12]
 8002a7a:	3307      	adds	r3, #7
 8002a7c:	f023 0307 	bic.w	r3, r3, #7
 8002a80:	3308      	adds	r3, #8
 8002a82:	9303      	str	r3, [sp, #12]
 8002a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a86:	4433      	add	r3, r6
 8002a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a8a:	e76a      	b.n	8002962 <_svfiprintf_r+0x52>
 8002a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a90:	460c      	mov	r4, r1
 8002a92:	2001      	movs	r0, #1
 8002a94:	e7a8      	b.n	80029e8 <_svfiprintf_r+0xd8>
 8002a96:	2300      	movs	r3, #0
 8002a98:	3401      	adds	r4, #1
 8002a9a:	9305      	str	r3, [sp, #20]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f04f 0c0a 	mov.w	ip, #10
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002aa8:	3a30      	subs	r2, #48	@ 0x30
 8002aaa:	2a09      	cmp	r2, #9
 8002aac:	d903      	bls.n	8002ab6 <_svfiprintf_r+0x1a6>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0c6      	beq.n	8002a40 <_svfiprintf_r+0x130>
 8002ab2:	9105      	str	r1, [sp, #20]
 8002ab4:	e7c4      	b.n	8002a40 <_svfiprintf_r+0x130>
 8002ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aba:	4604      	mov	r4, r0
 8002abc:	2301      	movs	r3, #1
 8002abe:	e7f0      	b.n	8002aa2 <_svfiprintf_r+0x192>
 8002ac0:	ab03      	add	r3, sp, #12
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	462a      	mov	r2, r5
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <_svfiprintf_r+0x1f0>)
 8002ac8:	a904      	add	r1, sp, #16
 8002aca:	4638      	mov	r0, r7
 8002acc:	f3af 8000 	nop.w
 8002ad0:	1c42      	adds	r2, r0, #1
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	d1d6      	bne.n	8002a84 <_svfiprintf_r+0x174>
 8002ad6:	89ab      	ldrh	r3, [r5, #12]
 8002ad8:	065b      	lsls	r3, r3, #25
 8002ada:	f53f af2d 	bmi.w	8002938 <_svfiprintf_r+0x28>
 8002ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ae0:	e72c      	b.n	800293c <_svfiprintf_r+0x2c>
 8002ae2:	ab03      	add	r3, sp, #12
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	462a      	mov	r2, r5
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <_svfiprintf_r+0x1f0>)
 8002aea:	a904      	add	r1, sp, #16
 8002aec:	4638      	mov	r0, r7
 8002aee:	f000 f879 	bl	8002be4 <_printf_i>
 8002af2:	e7ed      	b.n	8002ad0 <_svfiprintf_r+0x1c0>
 8002af4:	08002fd8 	.word	0x08002fd8
 8002af8:	08002fe2 	.word	0x08002fe2
 8002afc:	00000000 	.word	0x00000000
 8002b00:	08002859 	.word	0x08002859
 8002b04:	08002fde 	.word	0x08002fde

08002b08 <_printf_common>:
 8002b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	4616      	mov	r6, r2
 8002b0e:	4698      	mov	r8, r3
 8002b10:	688a      	ldr	r2, [r1, #8]
 8002b12:	690b      	ldr	r3, [r1, #16]
 8002b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bfb8      	it	lt
 8002b1c:	4613      	movlt	r3, r2
 8002b1e:	6033      	str	r3, [r6, #0]
 8002b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b24:	4607      	mov	r7, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	b10a      	cbz	r2, 8002b2e <_printf_common+0x26>
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	6033      	str	r3, [r6, #0]
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	0699      	lsls	r1, r3, #26
 8002b32:	bf42      	ittt	mi
 8002b34:	6833      	ldrmi	r3, [r6, #0]
 8002b36:	3302      	addmi	r3, #2
 8002b38:	6033      	strmi	r3, [r6, #0]
 8002b3a:	6825      	ldr	r5, [r4, #0]
 8002b3c:	f015 0506 	ands.w	r5, r5, #6
 8002b40:	d106      	bne.n	8002b50 <_printf_common+0x48>
 8002b42:	f104 0a19 	add.w	sl, r4, #25
 8002b46:	68e3      	ldr	r3, [r4, #12]
 8002b48:	6832      	ldr	r2, [r6, #0]
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	42ab      	cmp	r3, r5
 8002b4e:	dc26      	bgt.n	8002b9e <_printf_common+0x96>
 8002b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	3b00      	subs	r3, #0
 8002b58:	bf18      	it	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	0692      	lsls	r2, r2, #26
 8002b5e:	d42b      	bmi.n	8002bb8 <_printf_common+0xb0>
 8002b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b64:	4641      	mov	r1, r8
 8002b66:	4638      	mov	r0, r7
 8002b68:	47c8      	blx	r9
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	d01e      	beq.n	8002bac <_printf_common+0xa4>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	6922      	ldr	r2, [r4, #16]
 8002b72:	f003 0306 	and.w	r3, r3, #6
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf02      	ittt	eq
 8002b7a:	68e5      	ldreq	r5, [r4, #12]
 8002b7c:	6833      	ldreq	r3, [r6, #0]
 8002b7e:	1aed      	subeq	r5, r5, r3
 8002b80:	68a3      	ldr	r3, [r4, #8]
 8002b82:	bf0c      	ite	eq
 8002b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b88:	2500      	movne	r5, #0
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	bfc4      	itt	gt
 8002b8e:	1a9b      	subgt	r3, r3, r2
 8002b90:	18ed      	addgt	r5, r5, r3
 8002b92:	2600      	movs	r6, #0
 8002b94:	341a      	adds	r4, #26
 8002b96:	42b5      	cmp	r5, r6
 8002b98:	d11a      	bne.n	8002bd0 <_printf_common+0xc8>
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	e008      	b.n	8002bb0 <_printf_common+0xa8>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	47c8      	blx	r9
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d103      	bne.n	8002bb4 <_printf_common+0xac>
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb4:	3501      	adds	r5, #1
 8002bb6:	e7c6      	b.n	8002b46 <_printf_common+0x3e>
 8002bb8:	18e1      	adds	r1, r4, r3
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	2030      	movs	r0, #48	@ 0x30
 8002bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002bc2:	4422      	add	r2, r4
 8002bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002bcc:	3302      	adds	r3, #2
 8002bce:	e7c7      	b.n	8002b60 <_printf_common+0x58>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	4638      	mov	r0, r7
 8002bd8:	47c8      	blx	r9
 8002bda:	3001      	adds	r0, #1
 8002bdc:	d0e6      	beq.n	8002bac <_printf_common+0xa4>
 8002bde:	3601      	adds	r6, #1
 8002be0:	e7d9      	b.n	8002b96 <_printf_common+0x8e>
	...

08002be4 <_printf_i>:
 8002be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002be8:	7e0f      	ldrb	r7, [r1, #24]
 8002bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002bec:	2f78      	cmp	r7, #120	@ 0x78
 8002bee:	4691      	mov	r9, r2
 8002bf0:	4680      	mov	r8, r0
 8002bf2:	460c      	mov	r4, r1
 8002bf4:	469a      	mov	sl, r3
 8002bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002bfa:	d807      	bhi.n	8002c0c <_printf_i+0x28>
 8002bfc:	2f62      	cmp	r7, #98	@ 0x62
 8002bfe:	d80a      	bhi.n	8002c16 <_printf_i+0x32>
 8002c00:	2f00      	cmp	r7, #0
 8002c02:	f000 80d2 	beq.w	8002daa <_printf_i+0x1c6>
 8002c06:	2f58      	cmp	r7, #88	@ 0x58
 8002c08:	f000 80b9 	beq.w	8002d7e <_printf_i+0x19a>
 8002c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c14:	e03a      	b.n	8002c8c <_printf_i+0xa8>
 8002c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c1a:	2b15      	cmp	r3, #21
 8002c1c:	d8f6      	bhi.n	8002c0c <_printf_i+0x28>
 8002c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8002c24 <_printf_i+0x40>)
 8002c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c91 	.word	0x08002c91
 8002c2c:	08002c0d 	.word	0x08002c0d
 8002c30:	08002c0d 	.word	0x08002c0d
 8002c34:	08002c0d 	.word	0x08002c0d
 8002c38:	08002c0d 	.word	0x08002c0d
 8002c3c:	08002c91 	.word	0x08002c91
 8002c40:	08002c0d 	.word	0x08002c0d
 8002c44:	08002c0d 	.word	0x08002c0d
 8002c48:	08002c0d 	.word	0x08002c0d
 8002c4c:	08002c0d 	.word	0x08002c0d
 8002c50:	08002d91 	.word	0x08002d91
 8002c54:	08002cbb 	.word	0x08002cbb
 8002c58:	08002d4b 	.word	0x08002d4b
 8002c5c:	08002c0d 	.word	0x08002c0d
 8002c60:	08002c0d 	.word	0x08002c0d
 8002c64:	08002db3 	.word	0x08002db3
 8002c68:	08002c0d 	.word	0x08002c0d
 8002c6c:	08002cbb 	.word	0x08002cbb
 8002c70:	08002c0d 	.word	0x08002c0d
 8002c74:	08002c0d 	.word	0x08002c0d
 8002c78:	08002d53 	.word	0x08002d53
 8002c7c:	6833      	ldr	r3, [r6, #0]
 8002c7e:	1d1a      	adds	r2, r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6032      	str	r2, [r6, #0]
 8002c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e09d      	b.n	8002dcc <_printf_i+0x1e8>
 8002c90:	6833      	ldr	r3, [r6, #0]
 8002c92:	6820      	ldr	r0, [r4, #0]
 8002c94:	1d19      	adds	r1, r3, #4
 8002c96:	6031      	str	r1, [r6, #0]
 8002c98:	0606      	lsls	r6, r0, #24
 8002c9a:	d501      	bpl.n	8002ca0 <_printf_i+0xbc>
 8002c9c:	681d      	ldr	r5, [r3, #0]
 8002c9e:	e003      	b.n	8002ca8 <_printf_i+0xc4>
 8002ca0:	0645      	lsls	r5, r0, #25
 8002ca2:	d5fb      	bpl.n	8002c9c <_printf_i+0xb8>
 8002ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	da03      	bge.n	8002cb4 <_printf_i+0xd0>
 8002cac:	232d      	movs	r3, #45	@ 0x2d
 8002cae:	426d      	negs	r5, r5
 8002cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cb4:	4859      	ldr	r0, [pc, #356]	@ (8002e1c <_printf_i+0x238>)
 8002cb6:	230a      	movs	r3, #10
 8002cb8:	e011      	b.n	8002cde <_printf_i+0xfa>
 8002cba:	6821      	ldr	r1, [r4, #0]
 8002cbc:	6833      	ldr	r3, [r6, #0]
 8002cbe:	0608      	lsls	r0, r1, #24
 8002cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002cc4:	d402      	bmi.n	8002ccc <_printf_i+0xe8>
 8002cc6:	0649      	lsls	r1, r1, #25
 8002cc8:	bf48      	it	mi
 8002cca:	b2ad      	uxthmi	r5, r5
 8002ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002cce:	4853      	ldr	r0, [pc, #332]	@ (8002e1c <_printf_i+0x238>)
 8002cd0:	6033      	str	r3, [r6, #0]
 8002cd2:	bf14      	ite	ne
 8002cd4:	230a      	movne	r3, #10
 8002cd6:	2308      	moveq	r3, #8
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002cde:	6866      	ldr	r6, [r4, #4]
 8002ce0:	60a6      	str	r6, [r4, #8]
 8002ce2:	2e00      	cmp	r6, #0
 8002ce4:	bfa2      	ittt	ge
 8002ce6:	6821      	ldrge	r1, [r4, #0]
 8002ce8:	f021 0104 	bicge.w	r1, r1, #4
 8002cec:	6021      	strge	r1, [r4, #0]
 8002cee:	b90d      	cbnz	r5, 8002cf4 <_printf_i+0x110>
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	d04b      	beq.n	8002d8c <_printf_i+0x1a8>
 8002cf4:	4616      	mov	r6, r2
 8002cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8002cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8002cfe:	5dc7      	ldrb	r7, [r0, r7]
 8002d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d04:	462f      	mov	r7, r5
 8002d06:	42bb      	cmp	r3, r7
 8002d08:	460d      	mov	r5, r1
 8002d0a:	d9f4      	bls.n	8002cf6 <_printf_i+0x112>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d10b      	bne.n	8002d28 <_printf_i+0x144>
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	07df      	lsls	r7, r3, #31
 8002d14:	d508      	bpl.n	8002d28 <_printf_i+0x144>
 8002d16:	6923      	ldr	r3, [r4, #16]
 8002d18:	6861      	ldr	r1, [r4, #4]
 8002d1a:	4299      	cmp	r1, r3
 8002d1c:	bfde      	ittt	le
 8002d1e:	2330      	movle	r3, #48	@ 0x30
 8002d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d28:	1b92      	subs	r2, r2, r6
 8002d2a:	6122      	str	r2, [r4, #16]
 8002d2c:	f8cd a000 	str.w	sl, [sp]
 8002d30:	464b      	mov	r3, r9
 8002d32:	aa03      	add	r2, sp, #12
 8002d34:	4621      	mov	r1, r4
 8002d36:	4640      	mov	r0, r8
 8002d38:	f7ff fee6 	bl	8002b08 <_printf_common>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d14a      	bne.n	8002dd6 <_printf_i+0x1f2>
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	b004      	add	sp, #16
 8002d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f043 0320 	orr.w	r3, r3, #32
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	4833      	ldr	r0, [pc, #204]	@ (8002e20 <_printf_i+0x23c>)
 8002d54:	2778      	movs	r7, #120	@ 0x78
 8002d56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	6831      	ldr	r1, [r6, #0]
 8002d5e:	061f      	lsls	r7, r3, #24
 8002d60:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d64:	d402      	bmi.n	8002d6c <_printf_i+0x188>
 8002d66:	065f      	lsls	r7, r3, #25
 8002d68:	bf48      	it	mi
 8002d6a:	b2ad      	uxthmi	r5, r5
 8002d6c:	6031      	str	r1, [r6, #0]
 8002d6e:	07d9      	lsls	r1, r3, #31
 8002d70:	bf44      	itt	mi
 8002d72:	f043 0320 	orrmi.w	r3, r3, #32
 8002d76:	6023      	strmi	r3, [r4, #0]
 8002d78:	b11d      	cbz	r5, 8002d82 <_printf_i+0x19e>
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	e7ac      	b.n	8002cd8 <_printf_i+0xf4>
 8002d7e:	4827      	ldr	r0, [pc, #156]	@ (8002e1c <_printf_i+0x238>)
 8002d80:	e7e9      	b.n	8002d56 <_printf_i+0x172>
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f023 0320 	bic.w	r3, r3, #32
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	e7f6      	b.n	8002d7a <_printf_i+0x196>
 8002d8c:	4616      	mov	r6, r2
 8002d8e:	e7bd      	b.n	8002d0c <_printf_i+0x128>
 8002d90:	6833      	ldr	r3, [r6, #0]
 8002d92:	6825      	ldr	r5, [r4, #0]
 8002d94:	6961      	ldr	r1, [r4, #20]
 8002d96:	1d18      	adds	r0, r3, #4
 8002d98:	6030      	str	r0, [r6, #0]
 8002d9a:	062e      	lsls	r6, r5, #24
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	d501      	bpl.n	8002da4 <_printf_i+0x1c0>
 8002da0:	6019      	str	r1, [r3, #0]
 8002da2:	e002      	b.n	8002daa <_printf_i+0x1c6>
 8002da4:	0668      	lsls	r0, r5, #25
 8002da6:	d5fb      	bpl.n	8002da0 <_printf_i+0x1bc>
 8002da8:	8019      	strh	r1, [r3, #0]
 8002daa:	2300      	movs	r3, #0
 8002dac:	6123      	str	r3, [r4, #16]
 8002dae:	4616      	mov	r6, r2
 8002db0:	e7bc      	b.n	8002d2c <_printf_i+0x148>
 8002db2:	6833      	ldr	r3, [r6, #0]
 8002db4:	1d1a      	adds	r2, r3, #4
 8002db6:	6032      	str	r2, [r6, #0]
 8002db8:	681e      	ldr	r6, [r3, #0]
 8002dba:	6862      	ldr	r2, [r4, #4]
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f7fd fa2e 	bl	8000220 <memchr>
 8002dc4:	b108      	cbz	r0, 8002dca <_printf_i+0x1e6>
 8002dc6:	1b80      	subs	r0, r0, r6
 8002dc8:	6060      	str	r0, [r4, #4]
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	6123      	str	r3, [r4, #16]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dd4:	e7aa      	b.n	8002d2c <_printf_i+0x148>
 8002dd6:	6923      	ldr	r3, [r4, #16]
 8002dd8:	4632      	mov	r2, r6
 8002dda:	4649      	mov	r1, r9
 8002ddc:	4640      	mov	r0, r8
 8002dde:	47d0      	blx	sl
 8002de0:	3001      	adds	r0, #1
 8002de2:	d0ad      	beq.n	8002d40 <_printf_i+0x15c>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	079b      	lsls	r3, r3, #30
 8002de8:	d413      	bmi.n	8002e12 <_printf_i+0x22e>
 8002dea:	68e0      	ldr	r0, [r4, #12]
 8002dec:	9b03      	ldr	r3, [sp, #12]
 8002dee:	4298      	cmp	r0, r3
 8002df0:	bfb8      	it	lt
 8002df2:	4618      	movlt	r0, r3
 8002df4:	e7a6      	b.n	8002d44 <_printf_i+0x160>
 8002df6:	2301      	movs	r3, #1
 8002df8:	4632      	mov	r2, r6
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	4640      	mov	r0, r8
 8002dfe:	47d0      	blx	sl
 8002e00:	3001      	adds	r0, #1
 8002e02:	d09d      	beq.n	8002d40 <_printf_i+0x15c>
 8002e04:	3501      	adds	r5, #1
 8002e06:	68e3      	ldr	r3, [r4, #12]
 8002e08:	9903      	ldr	r1, [sp, #12]
 8002e0a:	1a5b      	subs	r3, r3, r1
 8002e0c:	42ab      	cmp	r3, r5
 8002e0e:	dcf2      	bgt.n	8002df6 <_printf_i+0x212>
 8002e10:	e7eb      	b.n	8002dea <_printf_i+0x206>
 8002e12:	2500      	movs	r5, #0
 8002e14:	f104 0619 	add.w	r6, r4, #25
 8002e18:	e7f5      	b.n	8002e06 <_printf_i+0x222>
 8002e1a:	bf00      	nop
 8002e1c:	08002fe9 	.word	0x08002fe9
 8002e20:	08002ffa 	.word	0x08002ffa

08002e24 <memmove>:
 8002e24:	4288      	cmp	r0, r1
 8002e26:	b510      	push	{r4, lr}
 8002e28:	eb01 0402 	add.w	r4, r1, r2
 8002e2c:	d902      	bls.n	8002e34 <memmove+0x10>
 8002e2e:	4284      	cmp	r4, r0
 8002e30:	4623      	mov	r3, r4
 8002e32:	d807      	bhi.n	8002e44 <memmove+0x20>
 8002e34:	1e43      	subs	r3, r0, #1
 8002e36:	42a1      	cmp	r1, r4
 8002e38:	d008      	beq.n	8002e4c <memmove+0x28>
 8002e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e42:	e7f8      	b.n	8002e36 <memmove+0x12>
 8002e44:	4402      	add	r2, r0
 8002e46:	4601      	mov	r1, r0
 8002e48:	428a      	cmp	r2, r1
 8002e4a:	d100      	bne.n	8002e4e <memmove+0x2a>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e56:	e7f7      	b.n	8002e48 <memmove+0x24>

08002e58 <_sbrk_r>:
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4d06      	ldr	r5, [pc, #24]	@ (8002e74 <_sbrk_r+0x1c>)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	4604      	mov	r4, r0
 8002e60:	4608      	mov	r0, r1
 8002e62:	602b      	str	r3, [r5, #0]
 8002e64:	f7fd fdda 	bl	8000a1c <_sbrk>
 8002e68:	1c43      	adds	r3, r0, #1
 8002e6a:	d102      	bne.n	8002e72 <_sbrk_r+0x1a>
 8002e6c:	682b      	ldr	r3, [r5, #0]
 8002e6e:	b103      	cbz	r3, 8002e72 <_sbrk_r+0x1a>
 8002e70:	6023      	str	r3, [r4, #0]
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
 8002e74:	200001fc 	.word	0x200001fc

08002e78 <memcpy>:
 8002e78:	440a      	add	r2, r1
 8002e7a:	4291      	cmp	r1, r2
 8002e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e80:	d100      	bne.n	8002e84 <memcpy+0xc>
 8002e82:	4770      	bx	lr
 8002e84:	b510      	push	{r4, lr}
 8002e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e8e:	4291      	cmp	r1, r2
 8002e90:	d1f9      	bne.n	8002e86 <memcpy+0xe>
 8002e92:	bd10      	pop	{r4, pc}

08002e94 <_realloc_r>:
 8002e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e98:	4680      	mov	r8, r0
 8002e9a:	4615      	mov	r5, r2
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	b921      	cbnz	r1, 8002eaa <_realloc_r+0x16>
 8002ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	f7ff bc4b 	b.w	8002740 <_malloc_r>
 8002eaa:	b92a      	cbnz	r2, 8002eb8 <_realloc_r+0x24>
 8002eac:	f7ff fbdc 	bl	8002668 <_free_r>
 8002eb0:	2400      	movs	r4, #0
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eb8:	f000 f81a 	bl	8002ef0 <_malloc_usable_size_r>
 8002ebc:	4285      	cmp	r5, r0
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	d802      	bhi.n	8002ec8 <_realloc_r+0x34>
 8002ec2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002ec6:	d8f4      	bhi.n	8002eb2 <_realloc_r+0x1e>
 8002ec8:	4629      	mov	r1, r5
 8002eca:	4640      	mov	r0, r8
 8002ecc:	f7ff fc38 	bl	8002740 <_malloc_r>
 8002ed0:	4607      	mov	r7, r0
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d0ec      	beq.n	8002eb0 <_realloc_r+0x1c>
 8002ed6:	42b5      	cmp	r5, r6
 8002ed8:	462a      	mov	r2, r5
 8002eda:	4621      	mov	r1, r4
 8002edc:	bf28      	it	cs
 8002ede:	4632      	movcs	r2, r6
 8002ee0:	f7ff ffca 	bl	8002e78 <memcpy>
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	f7ff fbbe 	bl	8002668 <_free_r>
 8002eec:	463c      	mov	r4, r7
 8002eee:	e7e0      	b.n	8002eb2 <_realloc_r+0x1e>

08002ef0 <_malloc_usable_size_r>:
 8002ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef4:	1f18      	subs	r0, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bfbc      	itt	lt
 8002efa:	580b      	ldrlt	r3, [r1, r0]
 8002efc:	18c0      	addlt	r0, r0, r3
 8002efe:	4770      	bx	lr

08002f00 <_init>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr

08002f0c <_fini>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr
